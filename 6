def func1(arg1, arg2):
    var31 = func2(arg2, arg1)
    var32 = arg1 - 750 ^ var31 ^ var31
    var33 = (arg1 - var32) ^ var31
    var34 = arg2 + arg2
    var35 = 1371094292 | var34
    var36 = var34 - 1771121840 | var34
    var37 = var33 - var34
    if arg1 < var34:
        var38 = -463 + arg1 | arg2 | var32
    else:
        var38 = (var34 | -197) & -933 - var34
    var39 = var33 - var34
    var40 = (var36 | var34) + -398 | arg2
    var41 = ((var37 + var39) & var35) & arg1
    if var35 < arg1:
        var42 = var39 | -336536114 | arg1 ^ var40
    else:
        var42 = var35 | var32 | var34 & var39
    var43 = ((var34 | var32) | -893) + arg1
    var44 = (var41 & var41 ^ var41) | var34
    var45 = (var32 | var41 + var37) | var43
    if var44 < var33:
        var46 = var39 + var41 - var31
    else:
        var46 = var41 + var31 - var36
    var47 = (arg1 ^ arg1) - -1919290561
    var48 = -2078626698 ^ var32 & var34 - var41
    var49 = ((-1205258715 | var41) ^ var43) & var40
    var50 = (262 + arg2) ^ var32 | arg1
    result = (var41 + var39 & var50 & var41 & ((var39 & arg1 | var49) + (1058416172 - var43)) | (var45 ^ var47)) ^ var35
    return result
def func4(arg5, arg6):
    var7 = func7()
    var20 = func11()
    var25 = func12(var20, var7)
    var26 = (var25 - arg6 | (((var7 - arg6 & var25 - -751 & var7) | arg5 & var25) | arg6) | var25 - -91 + (var7 ^ (var7 + (arg6 & 68))) ^ -2144644478 & var7) + var7 ^ 1374239352
    var27 = arg5 - var25
    var28 = var20 - (var27 ^ var27)
    var29 = var20 & var20
    result = var27 ^ arg5 & var27 + var7 & (var25 | (var27 & var20 & var29) & arg5 | var27 - var29 + var29)
    return result
def func12(arg21, arg22):
    var23 = 0
    for var24 in xrange(3):
        var23 += arg22 | (arg21 + var24)
    return var23
def func11():
    func8()
    result = len(func10(7, 2))
    func9()
    return result
def func10(arg8, arg9):
    var10 = arg8 + -622631862
    yield var10
    var11 = var10 - var10
    yield var11
    var12 = (var11 - arg8) + -717
    yield var12
    var13 = arg8 - (arg9 & (var12 - arg9))
    yield var13
    var14 = (var11 + -2098618745) + var12 - var10
    yield var14
    var15 = (var13 + arg9) ^ var13 + var10
    yield var15
    var16 = var13 & (var12 - arg9) | 1164130900
    yield var16
    var17 = var10 + arg8
    yield var17
    var18 = (var14 ^ var12 & var11) - var10
    yield var18
    var19 = 48 ^ (-672 + arg9) & var18
    yield var19
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -7
def func7():
    func5()
    result = len(xrange(47))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 0
def func2(arg3, arg4):
    def func3(acc, rest):
        var30 = func4(rest, 0)
        if acc == 0:
            return var30
        else:
            result = func3(acc - 1, var30)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var31 = func2(arg2, arg1)
    var32 = arg1 - 750 ^ var31 ^ var31
    var33 = (arg1 - var32) ^ var31
    var34 = arg2 + arg2
    var35 = 1371094292 | var34
    var36 = var34 - 1771121840 | var34
    var37 = var33 - var34
    if arg1 < var34:
        var38 = -463 + arg1 | arg2 | var32
    else:
        var38 = (var34 | -197) & -933 - var34
    var39 = var33 - var34
    var40 = (var36 | var34) + -398 | arg2
    var41 = ((var37 + var39) & var35) & arg1
    if var35 < arg1:
        var42 = var39 | -336536114 | arg1 ^ var40
    else:
        var42 = var35 | var32 | var34 & var39
    var43 = ((var34 | var32) | -893) + arg1
    var44 = (var41 & var41 ^ var41) | var34
    var45 = (var32 | var41 + var37) | var43
    if var44 < var33:
        var46 = var39 + var41 - var31
    else:
        var46 = var41 + var31 - var36
    var47 = (arg1 ^ arg1) - -1919290561
    var48 = -2078626698 ^ var32 & var34 - var41
    var49 = ((-1205258715 | var41) ^ var43) & var40
    var50 = (262 + arg2) ^ var32 | arg1
    result = (var41 + var39 & var50 & var41 & ((var39 & arg1 | var49) + (1058416172 - var43)) | (var45 ^ var47)) ^ var35
    return result
def func4(arg5, arg6):
    var7 = func7()
    var20 = func11()
    var25 = func12(var20, var7)
    var26 = (var25 - arg6 | (((var7 - arg6 & var25 - -751 & var7) | arg5 & var25) | arg6) | var25 - -91 + (var7 ^ (var7 + (arg6 & 68))) ^ -2144644478 & var7) + var7 ^ 1374239352
    var27 = arg5 - var25
    var28 = var20 - (var27 ^ var27)
    var29 = var20 & var20
    result = var27 ^ arg5 & var27 + var7 & (var25 | (var27 & var20 & var29) & arg5 | var27 - var29 + var29)
    return result
def func12(arg21, arg22):
    var23 = 0
    for var24 in xrange(3):
        var23 += arg22 | (arg21 + var24)
    return var23
def func11():
    func8()
    result = len(func10(7, 2))
    func9()
    return result
def func10(arg8, arg9):
    var10 = arg8 + -622631862
    yield var10
    var11 = var10 - var10
    yield var11
    var12 = (var11 - arg8) + -717
    yield var12
    var13 = arg8 - (arg9 & (var12 - arg9))
    yield var13
    var14 = (var11 + -2098618745) + var12 - var10
    yield var14
    var15 = (var13 + arg9) ^ var13 + var10
    yield var15
    var16 = var13 & (var12 - arg9) | 1164130900
    yield var16
    var17 = var10 + arg8
    yield var17
    var18 = (var14 ^ var12 & var11) - var10
    yield var18
    var19 = 48 ^ (-672 + arg9) & var18
    yield var19
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -7
def func7():
    func5()
    result = len(xrange(47))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 0
def func2(arg3, arg4):
    def func3(acc, rest):
        var30 = func4(rest, 0)
        if acc == 0:
            return var30
        else:
            result = func3(acc - 1, var30)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var31 = func2(arg2, arg1)
    var32 = arg1 - 750 ^ var31 ^ var31
    var33 = (arg1 - var32) ^ var31
    var34 = arg2 + arg2
    var35 = 1371094292 | var34
    var36 = var34 - 1771121840 | var34
    var37 = var33 - var34
    if arg1 < var34:
        var38 = -463 + arg1 | arg2 | var32
    else:
        var38 = (var34 | -197) & -933 - var34
    var39 = var33 - var34
    var40 = (var36 | var34) + -398 | arg2
    var41 = ((var37 + var39) & var35) & arg1
    if var35 < arg1:
        var42 = var39 | -336536114 | arg1 ^ var40
    else:
        var42 = var35 | var32 | var34 & var39
    var43 = ((var34 | var32) | -893) + arg1
    var44 = (var41 & var41 ^ var41) | var34
    var45 = (var32 | var41 + var37) | var43
    if var44 < var33:
        var46 = var39 + var41 - var31
    else:
        var46 = var41 + var31 - var36
    var47 = (arg1 ^ arg1) - -1919290561
    var48 = -2078626698 ^ var32 & var34 - var41
    var49 = ((-1205258715 | var41) ^ var43) & var40
    var50 = (262 + arg2) ^ var32 | arg1
    result = (var41 + var39 & var50 & var41 & ((var39 & arg1 | var49) + (1058416172 - var43)) | (var45 ^ var47)) ^ var35
    return result
def func4(arg5, arg6):
    var7 = func7()
    var20 = func11()
    var25 = func12(var20, var7)
    var26 = (var25 - arg6 | (((var7 - arg6 & var25 - -751 & var7) | arg5 & var25) | arg6) | var25 - -91 + (var7 ^ (var7 + (arg6 & 68))) ^ -2144644478 & var7) + var7 ^ 1374239352
    var27 = arg5 - var25
    var28 = var20 - (var27 ^ var27)
    var29 = var20 & var20
    result = var27 ^ arg5 & var27 + var7 & (var25 | (var27 & var20 & var29) & arg5 | var27 - var29 + var29)
    return result
def func12(arg21, arg22):
    var23 = 0
    for var24 in xrange(3):
        var23 += arg22 | (arg21 + var24)
    return var23
def func11():
    func8()
    result = len(func10(7, 2))
    func9()
    return result
def func10(arg8, arg9):
    var10 = arg8 + -622631862
    yield var10
    var11 = var10 - var10
    yield var11
    var12 = (var11 - arg8) + -717
    yield var12
    var13 = arg8 - (arg9 & (var12 - arg9))
    yield var13
    var14 = (var11 + -2098618745) + var12 - var10
    yield var14
    var15 = (var13 + arg9) ^ var13 + var10
    yield var15
    var16 = var13 & (var12 - arg9) | 1164130900
    yield var16
    var17 = var10 + arg8
    yield var17
    var18 = (var14 ^ var12 & var11) - var10
    yield var18
    var19 = 48 ^ (-672 + arg9) & var18
    yield var19
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -7
def func7():
    func5()
    result = len(xrange(47))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 0
def func2(arg3, arg4):
    def func3(acc, rest):
        var30 = func4(rest, 0)
        if acc == 0:
            return var30
        else:
            result = func3(acc - 1, var30)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var31 = func2(arg2, arg1)
    var32 = arg1 - 750 ^ var31 ^ var31
    var33 = (arg1 - var32) ^ var31
    var34 = arg2 + arg2
    var35 = 1371094292 | var34
    var36 = var34 - 1771121840 | var34
    var37 = var33 - var34
    if arg1 < var34:
        var38 = -463 + arg1 | arg2 | var32
    else:
        var38 = (var34 | -197) & -933 - var34
    var39 = var33 - var34
    var40 = (var36 | var34) + -398 | arg2
    var41 = ((var37 + var39) & var35) & arg1
    if var35 < arg1:
        var42 = var39 | -336536114 | arg1 ^ var40
    else:
        var42 = var35 | var32 | var34 & var39
    var43 = ((var34 | var32) | -893) + arg1
    var44 = (var41 & var41 ^ var41) | var34
    var45 = (var32 | var41 + var37) | var43
    if var44 < var33:
        var46 = var39 + var41 - var31
    else:
        var46 = var41 + var31 - var36
    var47 = (arg1 ^ arg1) - -1919290561
    var48 = -2078626698 ^ var32 & var34 - var41
    var49 = ((-1205258715 | var41) ^ var43) & var40
    var50 = (262 + arg2) ^ var32 | arg1
    result = (var41 + var39 & var50 & var41 & ((var39 & arg1 | var49) + (1058416172 - var43)) | (var45 ^ var47)) ^ var35
    return result
def func4(arg5, arg6):
    var7 = func7()
    var20 = func11()
    var25 = func12(var20, var7)
    var26 = (var25 - arg6 | (((var7 - arg6 & var25 - -751 & var7) | arg5 & var25) | arg6) | var25 - -91 + (var7 ^ (var7 + (arg6 & 68))) ^ -2144644478 & var7) + var7 ^ 1374239352
    var27 = arg5 - var25
    var28 = var20 - (var27 ^ var27)
    var29 = var20 & var20
    result = var27 ^ arg5 & var27 + var7 & (var25 | (var27 & var20 & var29) & arg5 | var27 - var29 + var29)
    return result
def func12(arg21, arg22):
    var23 = 0
    for var24 in xrange(3):
        var23 += arg22 | (arg21 + var24)
    return var23
def func11():
    func8()
    result = len(func10(7, 2))
    func9()
    return result
def func10(arg8, arg9):
    var10 = arg8 + -622631862
    yield var10
    var11 = var10 - var10
    yield var11
    var12 = (var11 - arg8) + -717
    yield var12
    var13 = arg8 - (arg9 & (var12 - arg9))
    yield var13
    var14 = (var11 + -2098618745) + var12 - var10
    yield var14
    var15 = (var13 + arg9) ^ var13 + var10
    yield var15
    var16 = var13 & (var12 - arg9) | 1164130900
    yield var16
    var17 = var10 + arg8
    yield var17
    var18 = (var14 ^ var12 & var11) - var10
    yield var18
    var19 = 48 ^ (-672 + arg9) & var18
    yield var19
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -7
def func7():
    func5()
    result = len(xrange(47))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 0
def func2(arg3, arg4):
    def func3(acc, rest):
        var30 = func4(rest, 0)
        if acc == 0:
            return var30
        else:
            result = func3(acc - 1, var30)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var31 = func2(arg2, arg1)
    var32 = arg1 - 750 ^ var31 ^ var31
    var33 = (arg1 - var32) ^ var31
    var34 = arg2 + arg2
    var35 = 1371094292 | var34
    var36 = var34 - 1771121840 | var34
    var37 = var33 - var34
    if arg1 < var34:
        var38 = -463 + arg1 | arg2 | var32
    else:
        var38 = (var34 | -197) & -933 - var34
    var39 = var33 - var34
    var40 = (var36 | var34) + -398 | arg2
    var41 = ((var37 + var39) & var35) & arg1
    if var35 < arg1:
        var42 = var39 | -336536114 | arg1 ^ var40
    else:
        var42 = var35 | var32 | var34 & var39
    var43 = ((var34 | var32) | -893) + arg1
    var44 = (var41 & var41 ^ var41) | var34
    var45 = (var32 | var41 + var37) | var43
    if var44 < var33:
        var46 = var39 + var41 - var31
    else:
        var46 = var41 + var31 - var36
    var47 = (arg1 ^ arg1) - -1919290561
    var48 = -2078626698 ^ var32 & var34 - var41
    var49 = ((-1205258715 | var41) ^ var43) & var40
    var50 = (262 + arg2) ^ var32 | arg1
    result = (var41 + var39 & var50 & var41 & ((var39 & arg1 | var49) + (1058416172 - var43)) | (var45 ^ var47)) ^ var35
    return result
def func4(arg5, arg6):
    var7 = func7()
    var20 = func11()
    var25 = func12(var20, var7)
    var26 = (var25 - arg6 | (((var7 - arg6 & var25 - -751 & var7) | arg5 & var25) | arg6) | var25 - -91 + (var7 ^ (var7 + (arg6 & 68))) ^ -2144644478 & var7) + var7 ^ 1374239352
    var27 = arg5 - var25
    var28 = var20 - (var27 ^ var27)
    var29 = var20 & var20
    result = var27 ^ arg5 & var27 + var7 & (var25 | (var27 & var20 & var29) & arg5 | var27 - var29 + var29)
    return result
def func12(arg21, arg22):
    var23 = 0
    for var24 in xrange(3):
        var23 += arg22 | (arg21 + var24)
    return var23
def func11():
    func8()
    result = len(func10(7, 2))
    func9()
    return result
def func10(arg8, arg9):
    var10 = arg8 + -622631862
    yield var10
    var11 = var10 - var10
    yield var11
    var12 = (var11 - arg8) + -717
    yield var12
    var13 = arg8 - (arg9 & (var12 - arg9))
    yield var13
    var14 = (var11 + -2098618745) + var12 - var10
    yield var14
    var15 = (var13 + arg9) ^ var13 + var10
    yield var15
    var16 = var13 & (var12 - arg9) | 1164130900
    yield var16
    var17 = var10 + arg8
    yield var17
    var18 = (var14 ^ var12 & var11) - var10
    yield var18
    var19 = 48 ^ (-672 + arg9) & var18
    yield var19
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -7
def func7():
    func5()
    result = len(xrange(47))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 0
def func2(arg3, arg4):
    def func3(acc, rest):
        var30 = func4(rest, 0)
        if acc == 0:
            return var30
        else:
            result = func3(acc - 1, var30)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var31 = func2(arg2, arg1)
    var32 = arg1 - 750 ^ var31 ^ var31
    var33 = (arg1 - var32) ^ var31
    var34 = arg2 + arg2
    var35 = 1371094292 | var34
    var36 = var34 - 1771121840 | var34
    var37 = var33 - var34
    if arg1 < var34:
        var38 = -463 + arg1 | arg2 | var32
    else:
        var38 = (var34 | -197) & -933 - var34
    var39 = var33 - var34
    var40 = (var36 | var34) + -398 | arg2
    var41 = ((var37 + var39) & var35) & arg1
    if var35 < arg1:
        var42 = var39 | -336536114 | arg1 ^ var40
    else:
        var42 = var35 | var32 | var34 & var39
    var43 = ((var34 | var32) | -893) + arg1
    var44 = (var41 & var41 ^ var41) | var34
    var45 = (var32 | var41 + var37) | var43
    if var44 < var33:
        var46 = var39 + var41 - var31
    else:
        var46 = var41 + var31 - var36
    var47 = (arg1 ^ arg1) - -1919290561
    var48 = -2078626698 ^ var32 & var34 - var41
    var49 = ((-1205258715 | var41) ^ var43) & var40
    var50 = (262 + arg2) ^ var32 | arg1
    result = (var41 + var39 & var50 & var41 & ((var39 & arg1 | var49) + (1058416172 - var43)) | (var45 ^ var47)) ^ var35
    return result
def func4(arg5, arg6):
    var7 = func7()
    var20 = func11()
    var25 = func12(var20, var7)
    var26 = (var25 - arg6 | (((var7 - arg6 & var25 - -751 & var7) | arg5 & var25) | arg6) | var25 - -91 + (var7 ^ (var7 + (arg6 & 68))) ^ -2144644478 & var7) + var7 ^ 1374239352
    var27 = arg5 - var25
    var28 = var20 - (var27 ^ var27)
    var29 = var20 & var20
    result = var27 ^ arg5 & var27 + var7 & (var25 | (var27 & var20 & var29) & arg5 | var27 - var29 + var29)
    return result
def func12(arg21, arg22):
    var23 = 0
    for var24 in xrange(3):
        var23 += arg22 | (arg21 + var24)
    return var23
def func11():
    func8()
    result = len(func10(7, 2))
    func9()
    return result
def func10(arg8, arg9):
    var10 = arg8 + -622631862
    yield var10
    var11 = var10 - var10
    yield var11
    var12 = (var11 - arg8) + -717
    yield var12
    var13 = arg8 - (arg9 & (var12 - arg9))
    yield var13
    var14 = (var11 + -2098618745) + var12 - var10
    yield var14
    var15 = (var13 + arg9) ^ var13 + var10
    yield var15
    var16 = var13 & (var12 - arg9) | 1164130900
    yield var16
    var17 = var10 + arg8
    yield var17
    var18 = (var14 ^ var12 & var11) - var10
    yield var18
    var19 = 48 ^ (-672 + arg9) & var18
    yield var19
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -7
def func7():
    func5()
    result = len(xrange(47))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 0
def func2(arg3, arg4):
    def func3(acc, rest):
        var30 = func4(rest, 0)
        if acc == 0:
            return var30
        else:
            result = func3(acc - 1, var30)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var31 = func2(arg2, arg1)
    var32 = arg1 - 750 ^ var31 ^ var31
    var33 = (arg1 - var32) ^ var31
    var34 = arg2 + arg2
    var35 = 1371094292 | var34
    var36 = var34 - 1771121840 | var34
    var37 = var33 - var34
    if arg1 < var34:
        var38 = -463 + arg1 | arg2 | var32
    else:
        var38 = (var34 | -197) & -933 - var34
    var39 = var33 - var34
    var40 = (var36 | var34) + -398 | arg2
    var41 = ((var37 + var39) & var35) & arg1
    if var35 < arg1:
        var42 = var39 | -336536114 | arg1 ^ var40
    else:
        var42 = var35 | var32 | var34 & var39
    var43 = ((var34 | var32) | -893) + arg1
    var44 = (var41 & var41 ^ var41) | var34
    var45 = (var32 | var41 + var37) | var43
    if var44 < var33:
        var46 = var39 + var41 - var31
    else:
        var46 = var41 + var31 - var36
    var47 = (arg1 ^ arg1) - -1919290561
    var48 = -2078626698 ^ var32 & var34 - var41
    var49 = ((-1205258715 | var41) ^ var43) & var40
    var50 = (262 + arg2) ^ var32 | arg1
    result = (var41 + var39 & var50 & var41 & ((var39 & arg1 | var49) + (1058416172 - var43)) | (var45 ^ var47)) ^ var35
    return result
def func4(arg5, arg6):
    var7 = func7()
    var20 = func11()
    var25 = func12(var20, var7)
    var26 = (var25 - arg6 | (((var7 - arg6 & var25 - -751 & var7) | arg5 & var25) | arg6) | var25 - -91 + (var7 ^ (var7 + (arg6 & 68))) ^ -2144644478 & var7) + var7 ^ 1374239352
    var27 = arg5 - var25
    var28 = var20 - (var27 ^ var27)
    var29 = var20 & var20
    result = var27 ^ arg5 & var27 + var7 & (var25 | (var27 & var20 & var29) & arg5 | var27 - var29 + var29)
    return result
def func12(arg21, arg22):
    var23 = 0
    for var24 in xrange(3):
        var23 += arg22 | (arg21 + var24)
    return var23
def func11():
    func8()
    result = len(func10(7, 2))
    func9()
    return result
def func10(arg8, arg9):
    var10 = arg8 + -622631862
    yield var10
    var11 = var10 - var10
    yield var11
    var12 = (var11 - arg8) + -717
    yield var12
    var13 = arg8 - (arg9 & (var12 - arg9))
    yield var13
    var14 = (var11 + -2098618745) + var12 - var10
    yield var14
    var15 = (var13 + arg9) ^ var13 + var10
    yield var15
    var16 = var13 & (var12 - arg9) | 1164130900
    yield var16
    var17 = var10 + arg8
    yield var17
    var18 = (var14 ^ var12 & var11) - var10
    yield var18
    var19 = 48 ^ (-672 + arg9) & var18
    yield var19
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -7
def func7():
    func5()
    result = len(xrange(47))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 0
def func2(arg3, arg4):
    def func3(acc, rest):
        var30 = func4(rest, 0)
        if acc == 0:
            return var30
        else:
            result = func3(acc - 1, var30)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var31 = func2(arg2, arg1)
    var32 = arg1 - 750 ^ var31 ^ var31
    var33 = (arg1 - var32) ^ var31
    var34 = arg2 + arg2
    var35 = 1371094292 | var34
    var36 = var34 - 1771121840 | var34
    var37 = var33 - var34
    if arg1 < var34:
        var38 = -463 + arg1 | arg2 | var32
    else:
        var38 = (var34 | -197) & -933 - var34
    var39 = var33 - var34
    var40 = (var36 | var34) + -398 | arg2
    var41 = ((var37 + var39) & var35) & arg1
    if var35 < arg1:
        var42 = var39 | -336536114 | arg1 ^ var40
    else:
        var42 = var35 | var32 | var34 & var39
    var43 = ((var34 | var32) | -893) + arg1
    var44 = (var41 & var41 ^ var41) | var34
    var45 = (var32 | var41 + var37) | var43
    if var44 < var33:
        var46 = var39 + var41 - var31
    else:
        var46 = var41 + var31 - var36
    var47 = (arg1 ^ arg1) - -1919290561
    var48 = -2078626698 ^ var32 & var34 - var41
    var49 = ((-1205258715 | var41) ^ var43) & var40
    var50 = (262 + arg2) ^ var32 | arg1
    result = (var41 + var39 & var50 & var41 & ((var39 & arg1 | var49) + (1058416172 - var43)) | (var45 ^ var47)) ^ var35
    return result
def func4(arg5, arg6):
    var7 = func7()
    var20 = func11()
    var25 = func12(var20, var7)
    var26 = (var25 - arg6 | (((var7 - arg6 & var25 - -751 & var7) | arg5 & var25) | arg6) | var25 - -91 + (var7 ^ (var7 + (arg6 & 68))) ^ -2144644478 & var7) + var7 ^ 1374239352
    var27 = arg5 - var25
    var28 = var20 - (var27 ^ var27)
    var29 = var20 & var20
    result = var27 ^ arg5 & var27 + var7 & (var25 | (var27 & var20 & var29) & arg5 | var27 - var29 + var29)
    return result
def func12(arg21, arg22):
    var23 = 0
    for var24 in xrange(3):
        var23 += arg22 | (arg21 + var24)
    return var23
def func11():
    func8()
    result = len(func10(7, 2))
    func9()
    return result
def func10(arg8, arg9):
    var10 = arg8 + -622631862
    yield var10
    var11 = var10 - var10
    yield var11
    var12 = (var11 - arg8) + -717
    yield var12
    var13 = arg8 - (arg9 & (var12 - arg9))
    yield var13
    var14 = (var11 + -2098618745) + var12 - var10
    yield var14
    var15 = (var13 + arg9) ^ var13 + var10
    yield var15
    var16 = var13 & (var12 - arg9) | 1164130900
    yield var16
    var17 = var10 + arg8
    yield var17
    var18 = (var14 ^ var12 & var11) - var10
    yield var18
    var19 = 48 ^ (-672 + arg9) & var18
    yield var19
def func9():
    global len
    del len
def func8():
    global len
    len = lambda x : -7
def func7():
    func5()
    result = len(xrange(47))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 0
def func2(arg3, arg4):
    def func3(acc, rest):
        var30 = func4(rest, 0)
        if acc == 0:
            return var30
        else:
            result = func3(acc - 1, var30)
            return result
    result = func3(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 13'
    print 'arg_number: 51'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
